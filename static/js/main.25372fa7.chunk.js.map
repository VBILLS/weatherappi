{"version":3,"sources":["Context/LocationContext.js","Context/WeatherContext.js","components/CustButton/CustButton.styles.js","components/CustButton/CustButton.component.jsx","components/GetWeatherButton/GetWeatherButton.jsx","components/SearchBox/SearchBox.jsx","components/Header/Header.component.jsx","components/MapContainer/MapContainer.jsx","components/CustCard/CustCard.styles.js","components/Hourly/Hourly.styles.js","components/DailyCard/DailyCard.styles.js","components/DailyCard/DailyCard.jsx","components/Daily/Daily.styles.js","components/Daily/Daily.jsx","components/Hourly/Hourly.component.jsx","components/CustCard/CustCard.component.jsx","components/WeatherResponse/WeatherResponse.js","pages/WeatherMain/WeatherMain.js","pages/MainPage/MainPage.js","App.js","index.js"],"names":["LocationContext","createContext","LocationProvider","props","useState","lat","lng","foradd","address_components","loc","setLoc","value","useMemo","Provider","children","WeatherContext","WeatherProvider","latitude","longitude","timezone","currently","minutely","hourly","daily","flags","weather","setWeather","CustButtonContainer","styled","button","CustButton","GetWeatherButton","SearchBox","searchField","setSearchField","useContext","InputGroup","id","Input","name","onChange","e","target","placeholder","Button","onClick","preventDefault","fetch","process","then","res","json","status","info","results","geometry","location","formatted_address","console","log","catch","err","outline","color","className","Header","isOpen","setIsOpen","Navbar","dark","expand","NavbarBrand","NavbarToggler","Collapse","navbar","Nav","NavItem","MapContainer","useEffect","navigator","geolocation","getCurrentPosition","pos","coords","googleMapsApiKey","googleMapsClientId","onError","error","zoom","center","position","CustCardContainer","div","HourlyContainer","HourlyTitleContainer","HourlyCardsContainer","HourlyCardContainer","HourlyTitle","h3","HourlyIcon","i","HourlySummary","p","DailyCardContainer","DailyCardTitleContainer","DailySummaryContainer","DailyCard","data","formatTime","time","strTime","toString","convert","parseInt","Date","formattedTime","icon","sunriseTime","risehours","getHours","riseMin","getMinutes","sunrise","sunsetTime","sethours","setMin","sunset","key","Row","noGutters","num","day","getDay","summary","Col","moonPhase","temperatureMin","temperatureMax","DailyContainer","DailyTitleContainer","DailyCardsContainer","DailyTitle","DailyIcon","DailySummary","Daily","iconClass","map","Hourly","CardTitle","CardText","temperature","precipProbability","CustCard","WeatherResponse","cur","Container","apparentTemperature","dewPoint","humidity","windSpeed","windGust","uvIndex","ozone","WeatherMain","isLoading","setIsLoading","a","method","headers","Headers","Accept","weathData","Spinner","MainPage","fluid","App","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25372fa7.chunk.js","sourcesContent":["import React, { createContext, useMemo, useState } from 'react';\n\nexport const LocationContext = createContext();\n\nexport function LocationProvider(props) {\n  const [loc, setLoc] = useState({\n    lat: 44.4758442,\n    lng: -73.212121,\n    foradd: 'Burlington, VT 05401, USA',\n    address_components: [],\n  });\n\n  const value = useMemo(() => [loc, setLoc], [loc]);\n  return (\n    <LocationContext.Provider value={value}>\n      {props.children}\n    </LocationContext.Provider>\n  );\n}\n","import React, { createContext, useMemo, useState, useEffect } from 'react';\n\nexport const WeatherContext = createContext();\n\nexport function WeatherProvider(props) {\n  const [weather, setWeather] = useState({\n    latitude: '',\n    longitude: '',\n    timezone: '',\n    currently: {},\n    minutely: {},\n    hourly: {},\n    daily: {},\n    flags: {},\n  });\n  const value = useMemo(() => [weather, setWeather], [weather]);\n  return (\n    <WeatherContext.Provider value={value}>\n      {props.children}\n    </WeatherContext.Provider>\n  );\n}\n\n// const useFetchWeather = useEffect(() => {\n//   function fetchWeatherData(lat, lng) {\n//     const proxy = 'https://cors-anywhere.herokuapp.com/';\n//     setIsLoading(true);\n//     fetch(\n//       `${proxy}https://api.darksky.net/forecast/64ba8a3916e562da1c3038e0e454a0e8/${lat},${lng}`,\n//       {\n//         method: 'GET',\n//         headers: new Headers({\n//           Accept: 'application/json',\n//         }),\n//       }\n//     )\n//       .then((res) => res.json())\n//       .then((weathData) => {\n//         setWeather(weathData);\n//         setIsLoading(false);\n//         console.log(weathData);\n//       })\n//       .catch((err) => console.error);\n//   }\n// }, [loc])\n","import styled from 'styled-components';\n\nexport const CustButtonContainer = styled.button`\n  font-weight: 400;\n  background-color: #514158;\n  color: #f3f3f3;\n  border: none;\n  border-radius: 3px;\n  box-shadow: 4px 2px 2px #00000099;\n  cursor: pointer;\n  text-align: center;\n  vertical-align: middle;\n  padding: 0.375rem 0.75rem;\n  text-transform: none;\n`;\n","import React from 'react';\n\nimport { CustButtonContainer } from './CustButton.styles';\n\nconst CustButton = ({ children, ...props }) => {\n  return <CustButtonContainer {...props}>{children}</CustButtonContainer>;\n};\n\nexport default CustButton;\n","import React, { useContext, useState } from 'react';\n\nimport { LocationContext } from '../../Context/LocationContext';\nimport { WeatherContext } from '../../Context/WeatherContext';\n\nimport CustButton from '../CustButton/CustButton.component';\nimport { Button, Spinner } from 'reactstrap';\n\nfunction GetWeatherButton() {\n  const [loc, setLoc] = useContext(LocationContext);\n  const [weather, setWeather] = useContext(WeatherContext);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  async function fetchWeatherData() {\n    console.log('starting fetchWeatherData');\n    const proxy = 'https://cors-anywhere.herokuapp.com/';\n    setIsLoading(true);\n    await fetch(\n      `${proxy}https://api.darksky.net/forecast/64ba8a3916e562da1c3038e0e454a0e8/${loc.lat},${loc.lng}`,\n      {\n        method: 'GET',\n        headers: new Headers({\n          Accept: 'application/json',\n        }),\n      }\n    )\n      .then((res) => res.json())\n      .then((weathData) => {\n        setWeather(weathData);\n        setIsLoading(false);\n        console.log('setweathdata - run');\n      })\n      .catch((err) => console.error);\n  }\n\n  return (\n    <CustButton\n      onClick={fetchWeatherData}\n      style={{\n        backgroundColor: '#514158',\n        border: 'none',\n        boxShadow: '4px 2px 2px #00000099',\n      }}\n    >\n      {isLoading ? (\n        <Spinner />\n      ) : (\n        <p style={{ margin: 0, padding: 0 }}>\n          Get Weather\n          <i className='fas fa-thermometer-quarter'></i>\n        </p>\n      )}\n    </CustButton>\n  );\n}\n\nexport default GetWeatherButton;\n","import React, { useState, useContext } from 'react';\nimport { LocationContext } from '../../Context/LocationContext';\n\nimport { Button, Input, InputGroup } from 'reactstrap';\n\nfunction SearchBox() {\n  const [searchField, setSearchField] = useState('');\n  const [loc, setLoc] = useContext(LocationContext);\n\n  const setLatLngBySearch = (e) => {\n    e.preventDefault();\n    setSearchField(e.target.value);\n    const apiKey = process.env.REACT_APP_API_KEY;\n\n    fetch(\n      `https://maps.googleapis.com/maps/api/geocode/json?address=${searchField}&key=${apiKey}`\n    )\n      .then((res) => res.json())\n      .then((res) => {\n        if (res.status === 'OK') {\n          const info = res.results[0];\n          setLoc({\n            lat: info.geometry.location.lat,\n            lng: info.geometry.location.lng,\n            foradd: info.formatted_address,\n            address_components: info.address_components,\n          });\n          console.log('res-after-setLoc', res);\n        } else {\n          console.log(res.status);\n        }\n      })\n      .catch((err) => console.log(err));\n  };\n\n  const handleChange = (e) => {\n    setSearchField(e.target.value);\n  };\n\n  return (\n    <InputGroup id='address-search'>\n      <Input\n        name='address-value'\n        onChange={handleChange}\n        placeholder='Search your Address'\n        value={searchField}\n      />\n      <Button onClick={setLatLngBySearch} outline color='success'>\n        Search <i className='fas fa-search-location'></i>\n      </Button>\n    </InputGroup>\n  );\n}\nexport default SearchBox;\n","import React, { useState } from 'react';\n\nimport GetWeatherButton from '../GetWeatherButton/GetWeatherButton';\nimport SearchBox from '../SearchBox/SearchBox';\n\nimport {\n  Collapse,\n  Nav,\n  Navbar,\n  NavbarBrand,\n  NavItem,\n  NavbarToggler,\n  NavbarText,\n} from 'reactstrap';\n\nconst Header = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <Navbar color='dark' dark expand='md'>\n      <NavbarBrand className='text-light'>Weather App</NavbarBrand>\n      <NavbarToggler onClick={toggle} className='mr-2' />\n      <Collapse isOpen={isOpen} navbar>\n        <Nav className='ml-auto' navbar>\n          <NavItem>\n            <SearchBox />\n          </NavItem>\n        </Nav>\n      </Collapse>\n    </Navbar>\n  );\n};\n\nexport default Header;\n","import React, { useContext, useEffect } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\n\nimport { LocationContext } from '../../Context/LocationContext';\n\n// import { Spinner } from 'reactstrap';\n\nimport './MapContainer.styles.scss';\n\nfunction MapContainer() {\n  const [loc, setLoc] = useContext(LocationContext);\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition((pos) => {\n      const apiKey = process.env.REACT_APP_API_KEY;\n      fetch(\n        `https://maps.googleapis.com/maps/api/geocode/json?latlng=${pos.coords.latitude},${pos.coords.longitude}&key=${apiKey}`\n      )\n        .then((res) => res.json())\n        .then((res) =>\n          setLoc({\n            lat: res.results[0].geometry.location.lat,\n            lng: res.results[0].geometry.location.lng,\n            foradd: res.results[4].formatted_address,\n            address_components: res.results,\n          })\n        )\n        .catch((err) => console.log(err));\n    });\n  }, []);\n\n  return (\n    <div className='mapcontainer'>\n      <strong>{loc.foradd}</strong>\n      <LoadScript\n        googleMapsApiKey={process.env.REACT_APP_API_KEY}\n        googleMapsClientId={process.env.REACT_APP_CLIENT_KEY}\n        onError={(err) => console.error()}\n      >\n        <GoogleMap id='weather-loc-map' zoom={10} center={loc}>\n          <Marker position={loc}></Marker>\n        </GoogleMap>\n      </LoadScript>\n    </div>\n  );\n}\n\nexport default MapContainer;\n","import styled from 'styled-components';\n\nexport const CustCardContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: #514158;\n  border: none;\n  border-radius: 5px;\n  padding: 0.5rem;\n  box-shadow: 4px 2px 2px #00000099;\n`;\n","import styled from 'styled-components';\n\nimport { CustCardContainer } from '../CustCard/CustCard.styles';\n\nexport const HourlyContainer = styled.div`\n  max-width: 100%;\n  max-height: 8rem;\n  margin-top: 1rem;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const HourlyTitleContainer = styled.div`\n  max-width: 30%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  align-items: center;\n`;\n\nexport const HourlyCardsContainer = styled.div`\n  margin: 0;\n  max-width: 70%;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  overflow-x: auto;\n`;\n\nexport const HourlyCardContainer = styled(CustCardContainer)`\n  flex: 0 0 auto;\n  width: 3rem;\n  height: 4rem;\n  font-size: 8px;\n  padding: 2px;\n  margin: 2px;\n  border: 1px solid #312b33;\n`;\n\nexport const HourlyTitle = styled.h3`\n  color: #b8a2c2;\n`;\n\nexport const HourlyIcon = styled.i`\n  font-size: 24px;\n`;\n\nexport const HourlySummary = styled.p`\n  margin-top: 0.5rem;\n  text-align: center;\n`;\n","import styled from 'styled-components';\n\nimport { HourlyCardContainer } from '../Hourly/Hourly.styles';\n\nexport const DailyCardContainer = styled(HourlyCardContainer)`\n  width: 100%;\n  height: auto;\n  font-size: 0.7rem;\n  text-align: center;\n`;\n\nexport const DailyCardTitleContainer = styled.div`\n  width: 50%;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  align-items: center;\n`;\n\nexport const DailySummaryContainer = styled.div`\n  width: 50%;\n`;\n// dayofweek - icon - summary\n// sunrise - sunset- moonphase\n// tempMin - tempmax\n","import React from 'react';\n\nimport { Card, Col, Row } from 'reactstrap';\n\nimport {\n  DailyCardContainer,\n  DailyCardTitleContainer,\n  DailySummaryContainer,\n} from './DailyCard.styles';\n\nimport './DailyCard.styles.scss';\n\nconst DailyCard = ({ data }) => {\n  const formatTime = (time) => {\n    const strTime = time.toString();\n    const addMilli = strTime + '000';\n    const convert = parseInt(addMilli, 10);\n    const fullTime = new Date(convert);\n    return fullTime;\n  };\n\n  const formattedTime = formatTime(data.time);\n  const icon = data.icon;\n  const getDay = (num) => {\n    let day;\n    switch (num) {\n      case 0:\n        day = 'Sunday';\n        break;\n      case 1:\n        day = 'Monday';\n        break;\n      case 2:\n        day = 'Tuesday';\n        break;\n      case 3:\n        day = 'Wednesday';\n        break;\n      case 4:\n        day = 'Thursday';\n        break;\n      case 5:\n        day = 'Friday';\n        break;\n      case 6:\n        day = 'Saturday';\n        break;\n      default:\n        day = 'Invalid day';\n    }\n    return day;\n  };\n\n  const sunriseTime = formatTime(data.sunriseTime);\n  let risehours = sunriseTime.getHours();\n  let riseMin = sunriseTime.getMinutes();\n  let sunrise = `${risehours}:${riseMin}`;\n  const sunsetTime = formatTime(data.sunsetTime);\n  let sethours = sunsetTime.getHours();\n  let setMin = sunsetTime.getMinutes();\n  let sunset = `${sethours}:${setMin}`;\n\n  return (\n    <DailyCardContainer key={data.time}>\n      <Row noGutters>\n        <DailyCardTitleContainer>\n          <span className='dow-daily-card'>\n            {getDay(formattedTime.getDay())}\n          </span>\n          <strong className='icon-daily-card'>\n            <i className={'wi wi-forecast-io-' + icon}></i>\n          </strong>\n        </DailyCardTitleContainer>\n        <DailySummaryContainer>{data.summary}</DailySummaryContainer>\n      </Row>\n      <Row noGutters className='sunandmoon-daily-card'>\n        <Col>Sunrise: {sunrise}</Col>\n        <Col>Sunset: {sunset}</Col>\n        <Col>MoonPhase: {data.moonPhase}</Col>\n      </Row>\n      <Row noGutters className='temp-daily-card'>\n        <Col>Temp Min: {data.temperatureMin}</Col>\n        <Col>Temp Max: {data.temperatureMax}</Col>\n      </Row>\n    </DailyCardContainer>\n  );\n};\n\nexport default DailyCard;\n","import styled from 'styled-components';\n\nimport {\n  HourlyCardsContainer,\n  HourlyTitleContainer,\n  HourlyContainer,\n} from '../Hourly/Hourly.styles';\n\nexport const DailyContainer = styled(HourlyContainer)`\n  max-height: 200px;\n`;\n\nexport const DailyTitleContainer = styled(HourlyTitleContainer)``;\n\nexport const DailyCardsContainer = styled(HourlyCardsContainer)`\n  width: 70%;\n  height: 180px;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 2px;\n\n  overflow-y: auto;\n`;\n\nexport const DailyTitle = styled.h3`\n  color: #b8a2c2;\n`;\n\nexport const DailyIcon = styled.i`\n  font-size: 24px;\n`;\n\nexport const DailySummary = styled.p`\n  margin-top: 0.5rem;\n  text-align: center;\n`;\n","import React, { useContext } from 'react';\n\nimport { WeatherContext } from '../../Context/WeatherContext';\n\nimport DailyCard from '../DailyCard/DailyCard';\n\nimport {\n  DailyContainer,\n  DailyCardsContainer,\n  DailyIcon,\n  DailySummary,\n  DailyTitle,\n  DailyTitleContainer,\n} from './Daily.styles';\n\nfunction Daily() {\n  const [weather] = useContext(WeatherContext);\n  const iconClass = weather.daily.icon;\n  const daily = weather.daily;\n\n  return (\n    <DailyContainer>\n      <DailyTitleContainer>\n        <DailyTitle>Daily:</DailyTitle>\n        <DailyIcon className={'wi wi-forecast-io-' + iconClass}></DailyIcon>\n        <DailySummary className='daily-summary-main'>\n          {daily.summary}\n        </DailySummary>\n      </DailyTitleContainer>\n      <DailyCardsContainer>\n        {daily.data &&\n          daily.data.map((data) => {\n            return <DailyCard key={data.time} data={data} />;\n          })}\n      </DailyCardsContainer>\n    </DailyContainer>\n  );\n}\n\nexport default Daily;\n","import React, { useContext } from 'react';\n\nimport { WeatherContext } from '../../Context/WeatherContext';\n\nimport {\n  HourlyContainer,\n  HourlyCardsContainer,\n  HourlyCardContainer,\n  HourlyIcon,\n  HourlySummary,\n  HourlyTitle,\n  HourlyTitleContainer,\n} from './Hourly.styles';\n\nimport { CardTitle, CardText } from 'reactstrap';\n\nfunction Hourly() {\n  const [weather] = useContext(WeatherContext);\n  const iconClass = weather.hourly.icon;\n  const hourly = weather.hourly;\n\n  const formatTime = (time) => {\n    const strTime = time.toString();\n    const addMilli = strTime + '000';\n    const convert = parseInt(addMilli, 10);\n    const fullTime = new Date(convert);\n    return fullTime;\n  };\n\n  return (\n    <HourlyContainer>\n      <HourlyTitleContainer>\n        <HourlyTitle>Hourly:</HourlyTitle>\n        <HourlyIcon className={'wi wi-forecast-io-' + iconClass}></HourlyIcon>\n        <HourlySummary className='hourly-summary-main'>\n          {hourly.summary}\n        </HourlySummary>\n      </HourlyTitleContainer>\n\n      <HourlyCardsContainer>\n        {hourly.data &&\n          hourly.data.map((data) => {\n            const formattedTime = formatTime(data.time);\n            const icon = data.icon;\n            return (\n              <HourlyCardContainer key={data.time}>\n                <CardTitle>\n                  {formattedTime.getHours()} -\n                  <strong>\n                    <i className={'wi wi-forecast-io-' + icon}></i>\n                  </strong>\n                </CardTitle>\n                <CardText>\n                  <i className='fas fa-thermometer-half'></i> {data.temperature}\n                  <br />\n                  <i className='fas fa-umbrella'></i> {data.precipProbability}\n                </CardText>\n              </HourlyCardContainer>\n            );\n          })}\n      </HourlyCardsContainer>\n    </HourlyContainer>\n  );\n}\n\nexport default Hourly;\n","import React from 'react';\n\nimport { CustCardContainer } from './CustCard.styles';\n\nconst CustCard = ({ children, ...props }) => {\n  return <CustCardContainer {...props}>{children}</CustCardContainer>;\n};\n\nexport default CustCard;\n","import React from 'react';\n\nimport CustCard from '../CustCard/CustCard.component';\n\nimport { Card, CardTitle, CardText, Col, Container, Row } from 'reactstrap';\nimport './WeatherResopnse.styles.scss';\n\nfunction WeatherResponse({ cur }) {\n  const iconClass = cur.icon;\n  return (\n    <Container className='WeatherResponse-div m-2'>\n      <CustCard className='currently'>\n        <div className='main-title-curSum'>\n          <h1 className='cur-icon'>\n            <i className={'wi wi-forecast-io-' + iconClass}></i>\n          </h1>\n          <h3 className='cur-summary lead'>{cur.summary}</h3>\n        </div>\n        <CardTitle className='cur-temCardTitleerature lead'>\n          Temp: <strong>{cur.temperature}</strong>\n          Feels Like: <strong>{cur.apparentTemperature}</strong>\n        </CardTitle>\n        <CardText className='card-text-curSum'>\n          <Row className='cur-dew-hum'>\n            <Col>Dew Point: {cur.dewPoint}</Col>\n            <Col>Humidity: {cur.humidity}</Col>\n          </Row>\n          <Row className='cur-wind'>\n            <Col>Wind Speed: {cur.windSpeed}</Col>\n            <Col>Gust: {cur.windGust}</Col>\n          </Row>\n          <Row className='cur-uv-ozone'>\n            <Col>UVIndex: {cur.uvIndex}</Col>\n            <Col>Ozone: {cur.ozone}</Col>\n          </Row>\n        </CardText>\n      </CustCard>\n    </Container>\n  );\n}\n\nexport default WeatherResponse;\n","import React, { useContext, useState } from 'react';\n\nimport { LocationContext } from '../../Context/LocationContext';\nimport { WeatherContext } from '../../Context/WeatherContext';\n\nimport CustButton from '../../components/CustButton/CustButton.component';\nimport WeatherResponse from '../../components/WeatherResponse/WeatherResponse';\n\nimport { Button, Spinner } from 'reactstrap';\n\nimport './WeatherMain.styles.scss';\n\nfunction WeatherMain() {\n  const [loc, setLoc] = useContext(LocationContext);\n  const [weather, setWeather] = useContext(WeatherContext);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  function getCurrentLocation() {\n    navigator.geolocation.getCurrentPosition((pos) => {\n      setLoc({ lat: pos.coords.latitude, lng: pos.coords.longitude });\n      console.log('WeatherMain -- geo loc - setloc', loc);\n    });\n  }\n\n  async function handleGetLocName() {\n    console.log('starting handleGetLocName');\n    const apiKey = process.env.REACT_APP_API_KEY;\n    setIsLoading(true);\n    fetch(\n      `https://maps.googleapis.com/maps/api/geocode/json?latlng=${loc.lat},${loc.lng}&key=${apiKey}`\n    )\n      .then((res) => res.json())\n      .then((res) => {\n        if (res.status === 'OK') {\n          console.log('res-after-latLngCallLoc', res);\n          setLoc({\n            ...loc,\n            address_components: res.results,\n            foradd: res.results[5].formatted_address,\n          });\n        } else {\n          console.log(res.status);\n        }\n      })\n      .catch((err) => console.log(err));\n    setIsLoading(false);\n  }\n\n  async function fetchWeatherData() {\n    console.log('starting fetchWeatherData');\n    const proxy = 'https://cors-anywhere.herokuapp.com/';\n    setIsLoading(true);\n    await fetch(\n      `${proxy}https://api.darksky.net/forecast/64ba8a3916e562da1c3038e0e454a0e8/${loc.lat},${loc.lng}`,\n      {\n        method: 'GET',\n        headers: new Headers({\n          Accept: 'application/json',\n        }),\n      }\n    )\n      .then((res) => res.json())\n      .then((weathData) => {\n        setWeather(weathData);\n        setIsLoading(false);\n        console.log('setweathdata - run');\n      })\n      .catch((err) => console.error);\n  }\n\n  return (\n    <div className='weatherMain'>\n      {isLoading ? (\n        <Spinner />\n      ) : (\n        <div className='weatherMain-button-div'>\n          <CustButton\n            className='weatherMain-button'\n            onClick={getCurrentLocation}\n          >\n            <i className='fas fa-location-arrow'></i>\n          </CustButton>\n          <CustButton className='weatherMain-button' onClick={fetchWeatherData}>\n            Get Weather\n          </CustButton>\n          <CustButton className='weatherMain-button' onClick={handleGetLocName}>\n            Get Location Name\n          </CustButton>\n        </div>\n      )}\n      <WeatherResponse cur={weather.currently} />\n    </div>\n  );\n}\n\nexport default WeatherMain;\n\n// const results = JSON.parse(localStorage.getItem('WeatherResults'));\n//     if (results) {\n//       setWeather(results);\n//     } else\n","import React from 'react';\n\nimport MapContainer from '../../components/MapContainer/MapContainer';\nimport Daily from '../../components/Daily/Daily';\nimport Hourly from '../../components/Hourly/Hourly.component';\nimport WeatherMain from '../WeatherMain/WeatherMain';\n\nimport { Container } from 'reactstrap';\nimport './MainPage.styles.scss';\n\nconst MainPage = () => {\n  return (\n    <Container fluid>\n      <div className='mainpage-map-curtemp'>\n        <MapContainer />\n        <WeatherMain />\n      </div>\n      <div className='main-summaries'>\n        <Hourly />\n        <Daily />\n      </div>\n    </Container>\n  );\n};\n\nexport default MainPage;\n","import React from 'react';\n\nimport Header from './components/Header/Header.component';\nimport MainPage from './pages/MainPage/MainPage';\n\nimport { Container } from 'reactstrap';\n\nimport './weathericoncss/css/weather-icons.min.css';\nimport './App.css';\nimport { LocationProvider } from './Context/LocationContext';\nimport { WeatherProvider } from './Context/WeatherContext';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <LocationProvider>\n        <WeatherProvider>\n          <Header />\n          <Container fluid className='mt-2'>\n            {/* <TestPage /> */}\n            <MainPage />\n            <div className='poweredby-div'>\n              <a href='https://darksky.net/poweredby/'>\n                Weather Powered By Dark Sky\n              </a>\n            </div>\n          </Container>\n        </WeatherProvider>\n      </LocationProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}